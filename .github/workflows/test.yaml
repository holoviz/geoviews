name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: "0 18 * * SUN"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"
  DISPLAY: ":99.0"
  PYTHONIOENCODING: "utf-8"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYDEVD_DISABLE_FILE_VALIDATION: 1
  USE_PYGEOS: 0

defaults:
  run:
    shell: bash -el {0}

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: "ubuntu-latest"
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0.1a19
  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      code_change: ${{ steps.filter.outputs.code }}
      matrix: ${{ env.MATRIX }}
    steps:
      - uses: actions/checkout@v3
        if: github.event_name != 'pull_request'
      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'geoviews/**'
              - 'examples/**'
              - 'setup.py'
              - 'pyproject.toml'
              - '.github/workflows/test.yaml'
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.9", "3.11"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.9", "3.10", "3.11"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "python-version": ["3.11"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  unit_test_suite:
    name: Unit tests on Python ${{ matrix.python-version }}, ${{ matrix.os }}
    needs: [pre_commit, setup]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 60
    steps:
      - uses: holoviz-dev/holoviz_tasks/install@v0.1a19
        if: needs.setup.outputs.code_change == 'true'
        with:
          name: unit_test_suite
          python-version: ${{ matrix.python-version }}
          channel-priority: strict
          channels: pyviz/label/dev,bokeh,conda-forge,nodefaults
          envs: "-o tests -o examples_extra -o recommended -o tests_ci"
          cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
          conda-update: true
          nodejs: true
        id: install
      - name: download data
        if: needs.setup.outputs.code_change == 'true'
        run: |
          conda activate test-environment
          bash scripts/download_data.sh
      - name: git describe
        if: needs.setup.outputs.code_change == 'true'
        run: |
          git describe
      - name: doit test_unit
        if: needs.setup.outputs.code_change == 'true'
        run: |
          conda activate test-environment
          doit test_unit
      - name: test examples
        if: needs.setup.outputs.code_change == 'true'
        run: |
          conda activate test-environment
          doit test_examples
      - name: codecov
        if: needs.setup.outputs.code_change == 'true'
        run: |
          conda activate test-environment
          codecov

  core_test_suite:
    name: Core tests on Python ${{ matrix.python-version }}, ${{ matrix.os }}
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.12"]
    timeout-minutes: 120
    steps:
      # Add back when this works on Python 3.12
      # - uses: holoviz-dev/holoviz_tasks/install@v0.1a19
      #   with:
      #     name: core_test_suite
      #     python-version: ${{ matrix.python-version }}
      #     # channel-priority: strict
      #     channels: pyviz/label/dev,conda-forge,nodefaults
      #     envs: "-o tests_core -o tests_ci"
      #     cache: ${{ github.event.inputs.cache || github.event.inputs.cache == '' }}
      #     conda-update: true
      #     id: install
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
      - name: Fetch unshallow
        run: git fetch --prune --tags --unshallow -f
      - uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: install
        run: |
          python -m pip install -ve '.[tests_core, tests_ci]'
      - name: download data
        run: |
          # conda activate test-environment
          bash scripts/download_data.sh
      - name: doit test_unit
        run: |
          # conda activate test-environment
          pytest geoviews
