[project]
name = "geoviews"
channels = ["pyviz/label/dev", "conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

[tasks]
install = 'python -m pip install --no-deps --disable-pip-version-check -e .'
sync-git-tags = 'python scripts/sync_git_tags.py geoviews'

[activation.env]
PYTHONIOENCODING = "utf-8"
USE_PYGEOS = "0"

[environments]
test-310 = ["py310", "test-core", "test-unit-task", "test", "example", "test-example", "download-data"]
test-311 = ["py311", "test-core", "test-unit-task", "test", "example", "test-example", "download-data"]
test-312 = ["py312", "test-core", "test-unit-task", "test", "example", "test-example", "download-data"]
test-core = ["py312", "test-unit-task", "test-core"]
test-ui = ["py312", "test-core", "test", "test-ui", "download-data"]
docs = ["py311", "example", "doc", "download-data"]
build = ["py311", "build"]
lint = ["py311", "lint"]
download-data = ["download-data"]

[dependencies]
bokeh = "3.5.*"
cartopy = ">=0.18.0"
holoviews = ">=1.16.0"
nodejs = ">=20"
numpy = "*"
packaging = "*"
panel = ">=1.0.0"
param = "*"
pip = "*"
pyproj = "*"
shapely = "*"
xyzservices = "*"

[feature.py310.dependencies]
python = "3.10.*"

[feature.py311.dependencies]
python = "3.11.*"

[feature.py312.dependencies]
python = "3.12.*"

[feature.example.dependencies]
bokeh_sampledata = "*"
datashader = "*"
fiona = "*"
geopandas-base = "*"
iris = ">=3.5"
matplotlib-base = ">2.2"
mock = "*"
netcdf4 = "*"
pandas = "*"
scipy = "*"
shapely = "*"
xarray = "*"
xesmf = "*"

[feature.download-data.tasks]
download-data = 'python scripts/download_data.py'

[feature.download-data.dependencies]
cftime = "*"
geodatasets = "*"
pooch = "*"
pyct = "*"
scipy = "*"
setuptools = "*" # Because of pyct
xarray = "*"

# =============================================
# =================== TESTS ===================
# =============================================
[feature.test-core.dependencies]
psutil = "*"
pytest = "*"
pytest-cov = "*"
pytest-github-actions-annotate-failures = "*"
pytest-xdist = "*"

[feature.test-unit-task.tasks] # So it is not showing up in the test-ui environment
test-unit = 'pytest geoviews/tests -n logical --dist loadgroup'

[feature.test.dependencies]
cftime = "*"
datashader = "*"
filelock = "*"
fiona = "*"
geopandas-base = "*"
iris = ">=3.5"
matplotlib-base = ">2.2"
nbval = "*"
netcdf4 = "*"
pandas = "*"
pyviz_comms = "*"
rioxarray = "*"
scipy = "*"
shapely = "*"
xarray = "*"

[feature.test-example.tasks]
test-example = 'pytest -n logical --dist loadscope --nbval-lax examples'

[feature.test-example.dependencies]
nbval = "*"

[feature.test-ui]
channels = ["microsoft"]

[feature.test-ui.dependencies]
playwright = { version = "*", channel = "microsoft" }
pytest-playwright = { version = "*", channel = "microsoft" }

[feature.test-ui.tasks]
_install-ui = 'playwright install chromium'

[feature.test-ui.tasks.test-ui]
cmd = 'pytest geoviews/tests/ui --ui --browser chromium'
depends_on = ["_install-ui"]

# =============================================
# =================== DOCS ====================
# =============================================
[feature.doc.dependencies]
graphviz = "*"
lxml = "*"
nbsite = ">=0.8.4,<0.9.0"
selenium = "*"
sphinx-reredirects = "*"

[feature.doc.activation.env]
MOZ_HEADLESS = "1"
MPLBACKEND = "Agg"

[feature.doc.tasks]
_docs-generate-rst = 'nbsite generate-rst --org holoviz --project-name geoviews'
_docs-generate = 'nbsite build --what=html --output=builtdocs --org holoviz --project-name geoviews'

[feature.doc.tasks.docs-build]
depends_on = ['_docs-generate-rst', '_docs-generate']

# =============================================
# ================== BUILD ====================
# =============================================
[feature.build.dependencies]
python-build = "*"
conda-build = "*"

[feature.build.tasks]
build-conda = 'bash scripts/conda/build.sh'
build-pip = 'python -m build .'
build-npm = { cmd = "npm pack .", cwd = "geoviews" }

# =============================================
# =================== LINT ====================
# =============================================
[feature.lint.dependencies]
pre-commit = "*"

[feature.lint.tasks]
lint = 'pre-commit run --all-files'
lint-install = 'pre-commit install'
